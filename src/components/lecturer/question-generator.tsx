'use client';

import { generateQuestions } from '@/ai/flows/generate-questions';
import { downloadTextFile } from '@/lib/download';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { AlertTriangle, Download, Loader2, Sparkles } from 'lucide-react';
import { useState, useTransition } from 'react';
import { Textarea } from '../ui/textarea';


const FormattedQuestions = ({ content }: { content: string }) => {
  const questionBlocks = content.split(/\n\d+\./).filter(Boolean).map((block, index, arr) => {
    if (index > 0 || (index === 0 && !/^\d+\./.test(arr[0]))) {
      return (arr[0].startsWith('1.') ? '' : `${index + 1}.`) + block;
    }
    return block;
  });

  return (
    <div className="prose prose-sm max-w-none rounded-lg border bg-muted/30 p-4 text-foreground">
      {questionBlocks.map((block, index) => (
        <div key={index} className="mb-4">
          {block.split('\n').map((line, lineIndex) => (
            <p key={lineIndex} className="mb-1">
              {line}
            </p>
          ))}
        </div>
      ))}
    </div>
  );
};


export function QuestionGenerator() {
  const [topic, setTopic] = useState('');
  const [count, setCount] = useState(5);
  const [isGenerating, startGenerationTransition] = useTransition();
  const [error, setError] = useState<string | null>(null);
  const [generatedQuestions, setGeneratedQuestions] = useState<string>('');

  const handleGenerate = () => {
    if (!topic || count <= 0) {
      setError('Please provide a topic and a valid number of questions.');
      return;
    }
    setError(null);
    setGeneratedQuestions('');
    startGenerationTransition(async () => {
      try {
        const result = await generateQuestions({ topic, count });
        setGeneratedQuestions(result.questions);
      } catch (e) {
        console.error(e);
        setError('An error occurred while generating questions.');
      }
    });
  };

  const handleDownload = () => {
    if (generatedQuestions) {
      downloadTextFile(generatedQuestions, `${topic.replace(/ /g, '_')}_questions.txt`);
    }
  };

  return (
    <>
      <Card>
        <CardHeader>
          <CardTitle className="font-headline flex items-center gap-2">
            <Sparkles className="h-6 w-6 text-primary" />
            AI Question Generator
          </CardTitle>
          <CardDescription>
            Provide a topic and the number of questions you need, and the AI
            will generate a multiple-choice quiz for you.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
            <div className="space-y-2 md:col-span-2">
              <Label htmlFor="topic">Topic</Label>
              <Input
                id="topic"
                placeholder="e.g., 'Cellular Biology' or 'World War II'"
                value={topic}
                onChange={(e) => setTopic(e.target.value)}
                disabled={isGenerating}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="question-count">Number of Questions</Label>
              <Input
                id="question-count"
                type="number"
                min="1"
                max="20"
                value={count}
                onChange={(e) => setCount(parseInt(e.target.value, 10) || 1)}
                disabled={isGenerating}
              />
            </div>
          </div>
        </CardContent>
        <CardFooter>
          <Button onClick={handleGenerate} disabled={isGenerating || !topic}>
            {isGenerating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              'Generate Questions'
            )}
          </Button>
        </CardFooter>
      </Card>

      {error && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {generatedQuestions && (
        <Card>
          <CardHeader className="flex-row items-center justify-between">
            <div>
              <CardTitle className="font-headline">
                Generated Questions
              </CardTitle>
              <CardDescription>
                Here are the questions generated by the AI for the topic: "{topic}"
              </CardDescription>
            </div>
            <Button variant="outline" onClick={handleDownload}>
              <Download className="mr-2 h-4 w-4" />
              Download
            </Button>
          </CardHeader>
          <CardContent>
            <FormattedQuestions content={generatedQuestions} />
          </CardContent>
        </Card>
      )}
    </>
  );
}
